{"version":3,"sources":["components/NavBar/NavBar.js","components/Home/Home.js","components/TabPanel/TabPanel.js","components/AboutMeAccordion/AboutMeAccordionInfo.js","components/AboutMeAccordion/AboutMeAccordion.js","components/AboutMe/AboutMe.js","components/MyWork/MyWork.js","components/App/App.js","serviceWorker.js","index.js"],"names":["NavBar","React","useState","value","setValue","AppBar","position","Container","Toolbar","Typography","variant","Tabs","onChange","event","newValue","Tab","label","Button","color","disableElevation","Home","props","Paper","Box","fontSize","fontWeight","TabPanel","children","index","other","role","hidden","id","aria-labelledby","a11yProps","AboutMeAccordionInfo","AboutMeAccordion","expanded","setExpanded","handleTabChange","map","section","Accordion","panel","isExpanded","AccordionSummary","expandIcon","aria-controls","AccordionDetails","orientation","info","AboutMe","MyWork","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43cb31ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Button, Tab, Tabs, Toolbar, Typography, Container } from '@material-ui/core';\r\n\r\nexport default function NavBar() {\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\" >\r\n                <Container>\r\n                    <Toolbar>\r\n                        <Typography variant='h6'>\r\n                            Test Text\r\n                        </Typography>\r\n                        <Tabs value={value} onChange={handleChange}>\r\n                            <Tab label=\"About\" />\r\n                            <Tab label=\"My Work\" />\r\n                            <Tab label=\"Contact\" />\r\n                        </Tabs>\r\n                        <Button variant=\"outlined\" color=\"secondary\" disableElevation>\r\n                            Resume\r\n                        </Button>\r\n                    </Toolbar>\r\n                </Container>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Paper, Typography, Button, Box } from '@material-ui/core';\r\n\r\nexport default function Home(props) {\r\n    return(\r\n        <Paper>\r\n            <Typography>\r\n                <Box fontSize=\"h5.fontSize\">\r\n                    Hi, my name is\r\n                </Box>\r\n                <Box fontSize=\"h2.fontSize\" fontWeight=\"fontWeightMedium\">\r\n                    Callum McGowan.\r\n                </Box>\r\n                <Box fontSize=\"h3.fontSize\">\r\n                    I'm an aspiring Software Developer.\r\n                </Box>\r\n                <Box>\r\n                    I'm a recent Durham University Physics graduate based in the UK.\r\n                    <br/>\r\n                    I have a passion for all things programming.\r\n                </Box>\r\n            </Typography>\r\n            <Button variant=\"outlined\">\r\n                Contact Me\r\n            </Button>\r\n        </Paper>\r\n    );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\nexport function TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return(\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index &&\r\n            <Box>\r\n                <Typography>\r\n                    {children}\r\n                </Typography>\r\n            </Box>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired\r\n};\r\n\r\nexport function a11yProps(index) {\r\n    return {\r\n        id: `vertical-tab-${index}`,\r\n        'aria-controls': `vertical-tabpanel-${index}`\r\n    }\r\n}","export let AboutMeAccordionInfo = [\r\n    [\"Education\",  [\r\n        [\"Durham University\", \"DurhamTest\"], \r\n        [\"Cirencester College\", \"CirencesterTest\"],\r\n        [\"Kingsdown School\", \"KingsdownTest\"]\r\n    ]],\r\n    [\"Work Experience\", [\r\n        [\"National Trust\", \"NationalTrustTest\"],\r\n        [\"Dominos\", \"Dominos Test\"]\r\n    ]],\r\n    [\"Hobbies\", [\r\n        [\"Ultimate Frisbee\", \"UltimateFrisbeeTest\"],\r\n        [\"DofE\", \"DofETest\"]\r\n    ]]\r\n];","import React from 'react';\r\nimport { Accordion, AccordionSummary, Typography, AccordionDetails, Tabs, Tab } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { TabPanel, a11yProps } from '../TabPanel/TabPanel';\r\nimport { AboutMeAccordionInfo } from './AboutMeAccordionInfo';\r\n\r\nfunction AboutMeAccordionPart(props) {\r\n    const [value, setValue] = React.useState(0);\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    return(\r\n        <Accordion>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n            >\r\n                <Typography>\r\n                    Education\r\n                </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n                <Tabs \r\n                    orientation=\"vertical\"\r\n                    value={value}\r\n                    onChange={handleTabChange}\r\n                >\r\n                    <Tab label=\"Durham University\" {...a11yProps(0)}/>\r\n                    <Tab label=\"Cirencester College\" {...a11yProps(1)}/>\r\n                    <Tab label=\"Kingsdown School\" {...a11yProps(2)}/>\r\n                </Tabs>\r\n                <TabPanel value={value} index={0}>\r\n                    Test1\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1}>\r\n                    test2\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2}>\r\n                    test3\r\n                </TabPanel>\r\n            </AccordionDetails>\r\n        </Accordion>\r\n    );\r\n}\r\n\r\nexport default function AboutMeAccordion(props) {\r\n    const [value, setValue] = React.useState(0);\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    const handleAccordionChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n        setValue(0)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {AboutMeAccordionInfo.map((section, index) => (\r\n                <Accordion expanded={expanded === `panel${index}`} onChange={handleAccordionChange(`panel${index}`)}>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls={`panel${index}a-content`}\r\n                        id={`panel${index}a-header`}\r\n                    >\r\n                        <Typography>{section[0]}</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Tabs\r\n                            orientation=\"vertical\"\r\n                            value={value}\r\n                            onChange={handleTabChange}\r\n                        >\r\n                            {section[1].map((info, index) => (\r\n                                <Tab label={info[0]} {...a11yProps(index)} />\r\n                            ))}\r\n                        </Tabs>\r\n                        {section[1].map((info, index) => (\r\n                            <TabPanel value={value} index={index}>\r\n                                {info[1]}\r\n                            </TabPanel>\r\n                        ))}\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            ))\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Paper, Typography, Box, Accordion } from '@material-ui/core';\r\nimport AboutMeAccordion from '../AboutMeAccordion/AboutMeAccordion';\r\n\r\nexport default function AboutMe(props) {\r\n    return (\r\n        <Paper>\r\n            <Typography>\r\n                <Box fontSize=\"h4.fontSize\">\r\n                    About me\r\n                </Box>\r\n                <Box>\r\n                    I'm a recent graduate from Durham University, where I achieved a first class honours in Physics.\r\n                    <br/>\r\n                    I have experience programming in Python, Java and JavaScript/React.\r\n                    <br/>\r\n                    I love programming because I have a passion for analysing and solving complex problems.\r\n                </Box>\r\n            </Typography>\r\n            <AboutMeAccordion />\r\n        </Paper>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function MyWork(props) {\r\n    return(\r\n        <div>\r\n            test\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport Home from '../Home/Home';\nimport AboutMe from '../AboutMe/AboutMe';\nimport MyWork from '../MyWork/MyWork';\nimport { Container } from '@material-ui/core';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Container>\n        <Home />\n        <AboutMe />\n        <MyWork />\n      </Container>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}